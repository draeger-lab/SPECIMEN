Metadata-Version: 2.1
Name: specimen
Version: 0.0.0
Author: Carolin Brune
Classifier: Programming Language :: Python :: 3.10
Classifier: Operating System :: MacOS
Classifier: Operating System :: Unix
Requires-Python: >=3.10
Description-Content-Type: text/markdown

# klebsiella pipeline

*basic idea*       
create a pipeline that allows an easy, mostly automated construction of a model based on a new genome

## directory structure

> **00-scripts** : contains the scripts needed to run the workflow
>> **playground** : contains unused code ideas, dicarded code or not working script
>> **auxiliaries** : contains scripts not directly involved in the pipeline, but useful for setting up prerequisites

> **01-data**     
> note: this can be completely different for each user, changes have to be noted in the yaml file
>> **annotated-genomes** : contains annotated genome files (.gbff)      
>> **template-models** : model used as templates are stored here
>> **databases** : contains databases used for refinement (not uploaded due to size)   
>> **BiGG-namespace** : contains the mappings for the BiGG database namespace (not uploaded)    

> **10-run**
> note: just an example of the structure the pipeline generates
>> **bidirectional-blast** : constains the files generated by `bidirectional_blast.py`       
>>> **db** : contains the databases for the blast e.g. .dmnd files      
>>> **DIAMONDblastp** : contains the by DIAMOND produced blastp results       
>>> **FASTA** : contains nucleotide (_nucl.fa) and protein (_prot.fa) FASTA files (CDS regions only)       
>> **draft-model** : contains the draft model generated by `generate_draft_model.py`    
>> **log** : contains the log.txt files for each step   
>> **refinement** : contains the files generated by the refinement steps   

## workflow

While each of the steps can be run separately using the scripts in the folder **00-scripts**, the whole pipeline can be run using `klebsiella_model_pipeline.py`. To ensure the correct input, change the `pipeline_config.yaml` accordingly beforehand.

1. perform bidirectional blast
2. generate a draft model
3. refine the model
   1. extension
      - add reaction, metabolites and genes via KEGG and MetaNetX (and BiGG namespace)
   2. cleanup
      - check directionality using BioCyc (optional)
      - dead ends and orphans (?)
      - gapfilling (?)
   3. annotation
      - search for more information in ModelSEED (?)
      - SBOannotator (?)
   4. smoothing
      - mass/charge curation (?)
      - check energy generating cycles (?)
      - update BOF (using BOFdat)
4. validation
5. analysis
